name: Releases Action

on:
  push:
    branches: [main]

jobs:
  createRelease:
    name: Create Release
    runs-on: 'ubuntu-latest'
    if: "contains(github.event.head_commit.message, '-build')"
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      package_version: ${{env.PACKAGE_VERSION}}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: test
          release_name: Release ${{ steps.create_release.outputs.upload_url }}
          draft: true
          prerelease: false
      - name: get-npm-version
        id: package-version
        uses: nyaayaya/package-version@v1
  Release:
    runs-on: ${{ matrix.os }}
    needs: createRelease
    if: "contains(github.event.head_commit.message, '-build')"
    strategy:
      matrix:
        include:
          - os: ubuntu-latest #SNAP
            py: 'pipenv run pyinstaller -w --noconfirm extractor.py dllive.py dlstories.py'
            name: 'sinon_${{ needs.createRelease.outputs.package_version }}_amd64.snap'
            type: 'application/vnd.snap'
          - os: ubuntu-latest #APPIMAGE
            py: 'pipenv run pyinstaller -w --noconfirm extractor.py dllive.py dlstories.py'
            name: Sinon-${{ needs.createRelease.outputs.package_version }}.AppImage
            type: 'application/vnd.appimage'
          - os: windows-latest
            py: 'pipenv run pyinstaller -w --noconfirm extractor.py dllive.py dlstories.py'
            name: 'Sinon Setup ${{ needs.createRelease.outputs.package_version }}.exe'
            type: 'application/vnd.microsoft.portable-executable'
          - os: macos-latest
            py: 'pipenv run pyinstaller extractor.spec'
            name: 'Sinon-${{ needs.createRelease.outputs.package_version }}-mac.zip'
            type: 'application/zip'
    steps:
      - uses: actions/checkout@v2
      ###NODE
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - run: npm ci
      - name: get-npm-version
        id: package-version
        uses: nyaayaya/package-version@v1
      ###PYTHON
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        working-directory: ./engine
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipenv
          python -m pipenv install
          python -m pipenv update youtube-dl
          ${{ matrix.py }}
      ###PACKAGING
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.github_token }}
      ###UPLOADING
      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.createRelease.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: ${{ matrix.type }}
