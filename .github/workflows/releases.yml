name: Releases Action

on:
  push:
    branches: [ main ]

jobs:
  createRelease:
    name: Create Release
    runs-on: 'ubuntu-latest'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: test
          release_name: Release ${{ steps.create_release.outputs.upload_url }}
          draft: true
          prerelease: false
  Release:
    runs-on: ${{ matrix.os }}
    needs: createRelease
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - run: npm ci
      - name: get-npm-version
        id: package-version
        uses: nyaayaya/package-version@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        working-directory: ./engine
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipenv
          python -m pipenv install
          python -m pipenv update youtube-dl
      - name: Pyinstaller Linux
        working-directory: ./engine
        run: pipenv run pyinstaller -w --noconfirm Extractor.py dllive.py dlstories.py
        if: matrix.os == 'ubuntu-latest'
      - name: Pyinstaller Windows
        working-directory: ./engine
        run: pipenv run pyinstaller -w --noconfirm Extractor.py dllive.py dlstories.py
        if: matrix.os == 'windows-latest'
      - name: Pyinstaller Mac
        working-directory: ./engine
        run: pipenv run pyinstaller --debug all --add-binary='/System/Library/Frameworks/Tk.framework/Tk':'tk' --add-binary='/System/Library/Frameworks/Tcl.framework/Tcl':'tcl' --onedir extractor.py dllive.py dlstories.py
        if: matrix.os == 'macos-latest'
      - name: Package Mac app
        if: matrix.os == 'macos-latest'
        run: |
        npm i --save-dev electron-packager
        electron-packager . --app-version ${{ env.PACKAGE_VERSION }} --prune=true --platform darwin --icon=./imgs/sinon.icns --overwrite
        ls
      - name: Build/release Electron app
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'windows-latest'
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.github_token }}
      - name: Upload Snap
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.createRelease.outputs.upload_url }}
          asset_path: ./dist/sinon_${{ env.PACKAGE_VERSION }}_amd64.snap
          asset_name: sinon_${{ env.PACKAGE_VERSION }}_amd64.snap
          asset_content_type: application/vnd.snap
      - name: Upload AppImage
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.createRelease.outputs.upload_url }}
          asset_path: ./dist/Sinon-${{ env.PACKAGE_VERSION }}.AppImage
          asset_name: Sinon-${{ env.PACKAGE_VERSION }}.AppImage
          asset_content_type: application/vnd.appimage
      - name: Upload Mac
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.createRelease.outputs.upload_url }}
          asset_path: ./dist/sinon-${{ env.PACKAGE_VERSION }}-mac.zip
          asset_name: Sinon-${{ env.PACKAGE_VERSION }}-mac.zip
          asset_content_type: application/zip
      - name: Upload Win
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.createRelease.outputs.upload_url }}
          asset_path: './dist/Sinon Setup ${{ env.PACKAGE_VERSION }}.exe'
          asset_name: 'Sinon Setup ${{ env.PACKAGE_VERSION }}.exe'
          asset_content_type: application/vnd.microsoft.portable-executable